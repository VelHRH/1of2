import { useState } from "react";
import { useRouter } from "next/router";
import { BackBtn } from "../../../components/BackBtn";
import Link from "next/link";
import Head from "next/head";
import { ResultElement } from "../../../components/ResultElement";

export const getServerSideProps = async (context) => {
 const { results } = context.query;
 return {
  props: { results: JSON.parse(results) },
 };
};

const Results = ({ results }) => {
 const [tipText, setTipText] = useState("");
 const [displayMode, setDisplayMode] = useState("rating");
 const router = useRouter();
 const { category, theme } = router.query;

 const filterRes = (res) => {
  let sortedArray = [];
  for (let i = res.length - 1; i >= 0; i--) {
   let isMatch = false;
   for (let j = 0; j < sortedArray.length; j++) {
    if (res[i]._id === sortedArray[j]._id) {
     isMatch = true;
     break;
    }
   }
   if (!isMatch) sortedArray.push(res[i]);
  }
  return sortedArray;
 };

 const isGrey = (index) => {
  const eventName = results[index].name;
  const neighbourName =
   index % 2 === 0 ? results[index + 1].name : results[index - 1].name;
  let countEvent = 0,
   countNeighbour = 0;
  for (const event of results) {
   if (eventName === event.name) countEvent++;
   if (neighbourName === event.name) countNeighbour++;
  }
  return countEvent > countNeighbour;
 };
 return (
  <>
   <Head>
    <title>Results</title>
    <meta name="description" content="Generated by create next app" />
    <link rel="icon" href="/favicon.ico" />
   </Head>

   <div className="w-full flex">
    <div className="flex-1 min-h-screen bg-slate-50 dark:bg-slate-800 p-10">
     <Link href={`/${category}/${theme}`}>
      <BackBtn>Menu</BackBtn>
     </Link>
     <h1 className="text-4xl mb-7 dark:text-slate-50 ">
      Your results for {theme}
     </h1>
     {displayMode === "rating" &&
      filterRes(results).map((result, index) => (
       <ResultElement imgUrl={result.imgUrl} place={index + 1} />
      ))}
     {displayMode === "history" && (
      <div className="flex">
       <div className="w-1/2">
        {results.map(
         (result, index) =>
          index % 2 === 0 &&
          index !== results.length - 1 && (
           <img
            src={result.imgUrl}
            alt="Team1"
            className={`mb-2 h-[200px] w-full cursor-pointer object-cover ${
             !isGrey(index) && "grayscale"
            }`}
           />
          )
        )}
       </div>
       <div className="w-1/2">
        {results.map(
         (result, index) =>
          index % 2 === 1 &&
          index !== results.length - 1 && (
           <img
            src={result.imgUrl}
            alt="Team2"
            className={`mb-2 h-[200px] w-full cursor-pointer object-cover ${
             !isGrey(index) && "grayscale"
            }`}
           />
          )
        )}
       </div>
      </div>
     )}
    </div>
    <div className="w-[25%] bg-slate-100 dark:bg-slate-900 min-h-screen p-10 flex flex-col items-center"></div>
   </div>
  </>
 );
};

export default Results;
