import {useState} from "react";
import { BackBtn } from "../../../components/BackBtn";
import Link from "next/link";
import Head from "next/head";
import styles from "../../../styles/Rating.module.css"
import { RatingElement } from "../../../components/RatingElement";
import { FullEvenView } from "../../../components/FullEvenView";
import { useRouter } from "next/router";
import {
 useQuery,
 QueryClient,
 dehydrate,
 useInfiniteQuery,
} from "react-query";
import InfiniteScroll from "react-infinite-scroll-component";
import { getTheme } from "../../../components/Fetch/getTheme";
import ChartRatings from "../../../components/Chart/ChartRatings";
import { getRating } from "../../../components/Fetch/getRatingWithData";
import { DataRatings } from "../../../components/Chart/DataRatings";

export const getServerSideProps = async (context) => {
 const { category, theme } = context.params;
 const queryClient = new QueryClient();

 await queryClient.prefetchQuery(["category", category, theme], () =>
  getTheme(category, theme)
 );

 const data = await getTheme(category, theme);

 if (data.length === 0) {
  return {
   notFound: true,
  };
 }
 return {
  props: { dehydratedState: dehydrate(queryClient) },
 };
};

const Rating = () => {
 const router = useRouter();
 const { category, theme } = router.query;

 const { data, fetchNextPage, hasNextPage, isLoading, isError } =
  useInfiniteQuery(
   ["rating", theme],
   ({ pageParam = 0 }) => getRating(category, theme, pageParam),
   { getNextPageParam: (lastPage) => lastPage.nextPage }
  );

 const themeData = useQuery(["category", category, theme], () =>
  getTheme(category, theme)
 );

 const [isEventOpened, setIsEventOpened] = useState(-1);

 if (isLoading) return <div></div>;

 if (themeData.isLoading) return <div>Loading...</div>;

 const handleClick = (index) => {
  setIsEventOpened(index);
 };

 return (
  <>
   <Head>
    <title>Rating</title>
    <meta name="description" content="Generated by create next app" />
    <link rel="icon" href="/favicon.ico" />
   </Head>
   {isEventOpened > -1 && (
    <FullEvenView
     setIsEventOpened={setIsEventOpened}
     link={
      data.pages[(isEventOpened - (isEventOpened % 8)) / 8].data[
       isEventOpened % 8
      ].imgUrl
     }
     name={
      data.pages[(isEventOpened - (isEventOpened % 8)) / 8].data[
       isEventOpened % 8
      ].name
     }
     wins={
      data.pages[(isEventOpened - (isEventOpened % 8)) / 8].data[
       isEventOpened % 8
      ].wins
     }
     likes={
      data.pages[(isEventOpened - (isEventOpened % 8)) / 8].data[
       isEventOpened % 8
      ].likes
     }
     dislikes={
      data.pages[(isEventOpened - (isEventOpened % 8)) / 8].data[
       isEventOpened % 8
      ].dislikes
     }
    />
   )}
   <div className="w-full flex">
    <div className="flex-1 min-h-screen bg-slate-50 dark:bg-slate-800 p-10">
     <Link href={`/${themeData.data[0].category}/${themeData.data[0].name}`}>
      <BackBtn>{themeData.data[0].name}</BackBtn>
     </Link>
     <div className="flex justify-between w-full">
      <h1 className="text-4xl mb-7 dark:text-slate-50 capitalize">Rating</h1>
     </div>
     <InfiniteScroll
      next={fetchNextPage}
      hasMore={hasNextPage}
      dataLength={data.pages[0].data.length * data.pages.length}
      className={`${styles.nobar}`}
     >
      {data.pages.map((pageData, i) =>
       pageData.data.map((event, index) => (
        <>
         <RatingElement
          key={event._id}
          index={index + 1 + i * 8}
          image={event.imgUrl}
          wins={event.wins}
          handleClick={handleClick}
         >
          {event.name}
         </RatingElement>
        </>
       ))
      )}
     </InfiniteScroll>
    </div>
    <div className="w-[25%] bg-slate-100 dark:bg-slate-900 min-h-screen p-10 flex flex-col items-center">
     <h1 className="text-3xl mb-5 dark:text-slate-50">
      Community: {DataRatings(themeData.data[0].stars)[0].avg.toFixed(2)}
     </h1>
     <ChartRatings data={DataRatings(themeData.data[0].stars).slice(1)} />
     <div className="text-xl dark:text-slate-50 mt-5">
      Based on {themeData.data[0].stars.length} votes
     </div>
     <h1 className="text-3xl mb-5 mt-16 dark:text-slate-50">
      Top in this theme:
     </h1>
     {data.pages[0].data.slice(0, 2).map((r, index) => (
      <div key={index} className="h-[100px] w-full mb-3">
       <div className="w-full h-full flex justify-between items-center text-2xl">
        <img
         onClick={() => setIsEventOpened(index)}
         src={r.imgUrl }
    
         alt="Top"
         className="h-full aspect-square object-cover rounded-full cursor-pointer"
        />
        <h1 className="dark:text-slate-50">{r.wins} wins</h1>
       </div>
      </div>
     ))}
    </div>
   </div>
  </>
 );
};

export default Rating;
