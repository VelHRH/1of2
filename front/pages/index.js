import Head from "next/head";
import { Category } from "../components/Category";
import { Search } from "../components/Search";
import { useState } from "react";
import { SideTop } from "../components/SideTop";
import { FunTip } from "../components/FunTip";
import { useQuery, QueryClient, dehydrate } from "react-query";

const getCategories = async () => {
 const res = await fetch(`${process.env.API_HOST}/categories`);
 return res.json();
};

export const getStaticProps = async () => {
 const queryClient = new QueryClient();

 await queryClient.prefetchQuery("categories", getCategories);

 return {
  props: { dehydratedState: dehydrate(queryClient) },
 };
};

export default function Home() {
 const [searchVal, setSearchVal] = useState("");

 const { data, isLoading } = useQuery("categories", getCategories);

 if (isLoading) return <div>Loading...</div>;

 return (
  <div className="w-full flex">
   <Head>
    <title>Categories</title>
    <meta name="description" content="Generated by create next app" />
    <link rel="icon" href="/favicon.ico" />
   </Head>
   <div className="flex-1 h-screen bg-slate-50 dark:bg-slate-800 p-10">
    <h1 className="text-4xl mb-7 dark:text-slate-50">Categories</h1>
    <Search searchVal={searchVal} setSearchVal={setSearchVal} />

    <div className="grid gap-4 grid-cols-3">
     {data.map(
      (category) =>
       category.name.slice(0, searchVal.length) === searchVal && (
        <Category key={category._id}>{category.name}</Category>
       )
     )}
    </div>
   </div>
   <div className="w-[25%] bg-slate-100 dark:bg-slate-900 min-h-screen">
    <div className="flex flex-col items-start px-10 pt-10">
     <FunTip
      tipText={
       "These are categories with topics created by our 1 of 2 team, but if there is no topic that you are interested in, you can find much more in our community creations or create a topic by yourself in the same section."
      }
     ></FunTip>
     <h1 className="text-2xl text-slate-500 mb-3 self-center">
      Top categories:
     </h1>
     {[...data]
      .sort((a, b) => b.subcategories.length - a.subcategories.length)
      .slice(0, 5)
      .map((category, index) => (
       <SideTop
        key={index}
        place={index + 1}
        themes={category.subcategories.length}
        name={category.name.toUpperCase()}
       />
      ))}
    </div>
   </div>
  </div>
 );
}
