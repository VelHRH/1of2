import Head from "next/head";
import { Search } from "../../components/Search";
import { useEffect, useState } from "react";
import { ProfileCard } from "../../components/ProfileCard";
import { useQuery, QueryClient, dehydrate, useMutation } from "react-query";
import Link from "next/link";
import Image from "next/image";
import { getUsers } from "../../components/Fetch/getUsers";

export const getServerSideProps = async (context) => {
 const queryClient = new QueryClient();

 await queryClient.prefetchQuery("allusers", () => getUsers());

 const data = await getUsers();

 if (data.message) {
  return {
   notFound: true,
  };
 }
 return {
  props: { dehydratedState: dehydrate(queryClient) },
 };
};

export default function AllUsers() {
 const [searchVal, setSearchVal] = useState("");
 const users = useQuery("allusers", () => getUsers());
 const [searchedUsers, setSearchedUsers] = useState(users.data);
 if (users.isLoading) return <div>Loading...</div>;
 useEffect(() => {
  setSearchedUsers(
   users.data
    .reverse()
    .filter(
     (u) =>
      u.login.slice(0, searchVal.length).toUpperCase() ===
      searchVal.toUpperCase()
    )
  );
 }, [searchVal]);
 return (
  <div className="w-full flex">
   <Head>
    <title>Community</title>
    <meta name="description" content="Generated by create next app" />
    <link rel="icon" href="/favicon.ico" />
   </Head>
   <div className="flex-1 min-h-screen bg-slate-50 dark:bg-slate-800 p-10">
    <h1 className="text-4xl mb-7 dark:text-slate-50">1of2 community</h1>
    <Search searchVal={searchVal} setSearchVal={setSearchVal} />
    <div className="flex">
     <div className="w-1/3 flex flex-col mr-4">
      {searchedUsers
       .filter((u, i) => i % 3 === 0)
       .map((user) => (
        <Link key={user._id} href={`/user/${user._id}`}>
         <ProfileCard
          rank={user.rank}
          created={user.created.length}
          imgUrl={user.imgUrl}
          played={user.winners.length}
         >
          {user.login}
         </ProfileCard>
        </Link>
       ))}
     </div>
     <div className="w-1/3 flex flex-col mr-4">
      {searchedUsers
       .filter((u, i) => i % 3 === 1)
       .map((user) => (
        <Link key={user._id} href={`/user/${user._id}`}>
         <ProfileCard
          rank={user.rank}
          created={user.created.length}
          imgUrl={user.imgUrl}
          played={user.winners.length}
         >
          {user.login}
         </ProfileCard>
        </Link>
       ))}
     </div>
     <div className="w-1/3 flex flex-col">
      {searchedUsers
       .filter((u, i) => i % 3 === 2)
       .map((user) => (
        <Link key={user._id} href={`/user/${user._id}`}>
         <ProfileCard
          rank={user.rank}
          created={user.created.length}
          imgUrl={user.imgUrl}
          played={user.winners.length}
         >
          {user.login}
         </ProfileCard>
        </Link>
       ))}
     </div>
    </div>
   </div>
   <div className="w-[25%] bg-slate-100 dark:bg-slate-900 min-h-screen p-10 flex flex-col items-center">
    <div className="text-xl dark:text-slate-50">
     Total registered: {users.data.length}
    </div>
    <div className="text-2xl dark:text-slate-50 mt-14 mb-5">
     Top 1of2 contributors:
    </div>
    {users.data.length > 1 &&
     users.data
      .slice(0, 5)
      .sort((a, b) => b.created.length - a.created.length)
      .map((u, index) => (
       <div key={index} className="h-[70px] w-full mb-3 rounded-xl">
        <div className="w-full h-full flex justify-between items-center text-2xl">
         <Image
          loader={() => u.imgUrl}
          onClick={() => setIsEventOpened(index)}
          src={u.imgUrl}
          alt="Top"
          width={70}
          height={20}
          className="h-full aspect-square object-cover rounded-full cursor-pointer"
         />
         <h1 className="dark:text-slate-50">
          {u.created.length} <span className="text-lg">themes</span>
         </h1>
        </div>
       </div>
      ))}
   </div>
  </div>
 );
}
