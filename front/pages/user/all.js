import Head from "next/head";
import { Search } from "../../components/Search";
import { useState } from "react";
import { ProfileCard } from "../../components/ProfileCard";
import { useQuery, QueryClient, dehydrate, useMutation } from "react-query";

const getUsers = async () => {
 const res = await fetch(`${process.env.API_HOST}/users/all`);
 return res.json();
};

export const getServerSideProps = async (context) => {
 const queryClient = new QueryClient();

 await queryClient.prefetchQuery("allusers", () => getUsers());

 const data = await getUsers();

 if (data.message) {
  return {
   notFound: true,
  };
 }
 return {
  props: { dehydratedState: dehydrate(queryClient) },
 };
};

export default function AllUsers() {
 const [searchVal, setSearchVal] = useState();

 const users = useQuery("allusers", () => getUsers());
 if (users.isLoading) return <div>Loading...</div>;
 return (
  <div className="w-full flex">
   <Head>
    <title>Community</title>
    <meta name="description" content="Generated by create next app" />
    <link rel="icon" href="/favicon.ico" />
   </Head>
   <div className="flex-1 min-h-screen bg-slate-50 dark:bg-slate-800 p-10">
    <h1 className="text-4xl mb-7 dark:text-slate-50">1of2 community</h1>
    <Search searchVal={searchVal} setSearchVal={setSearchVal} />
    <div className="flex">
     <div className="w-1/3 flex flex-col mr-4">
      {users.data
       .filter((u, i) => i % 3 === 0)
       .map((user) => (
        <ProfileCard
         rank={user.rank}
         created={user.created.length}
         imgUrl={user.imgUrl}
         played={user.winners.length}
        >
         {user.login}
        </ProfileCard>
       ))}
     </div>
     <div className="w-1/3 flex flex-col mr-4">
      {users.data
       .filter((u, i) => i % 3 === 1)
       .map((user) => (
        <ProfileCard
         rank={user.rank}
         created={user.created.length}
         imgUrl={user.imgUrl}
         played={user.winners.length}
        >
         {user.login}
        </ProfileCard>
       ))}
     </div>
     <div className="w-1/3 flex flex-col">
      {users.data
       .filter((u, i) => i % 3 === 2)
       .map((user) => (
        <ProfileCard
         rank={user.rank}
         created={user.created.length}
         imgUrl={user.imgUrl}
         played={user.winners.length}
        >
         {user.login}
        </ProfileCard>
       ))}
     </div>
    </div>
   </div>
   <div className="w-[25%] bg-slate-100 dark:bg-slate-900 min-h-screen"></div>
  </div>
 );
}
