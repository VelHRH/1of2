import Head from "next/head";
import { useEffect, useState } from "react";
import { Winner } from "../../components/Winner";
import { RatingElement } from "../../components/RatingElement";
import { FullEvenView } from "../../components/FullEvenView";
import Link from "next/link"
import { useRouter } from "next/router";
import { useQuery, QueryClient, dehydrate } from "react-query";
import { getUserById } from "../../components/Fetch/getUser";

export const getServerSideProps = async (context) => {
 const { id } = context.params;
 const queryClient = new QueryClient();
 await queryClient.prefetchQuery(["user", id], () =>
 getUserById(id)
 );

 const data = await getUserById(id);

 if (data.message) {
  return {
   notFound: true,
  };
 }
 return {
  props: { dehydratedState: dehydrate(queryClient) },
 };
};

const Me = () => {
  const [isEventOpened, setIsEventOpened] = useState(-1);
  const [allowEdit, setAllowEdit] = useState();
  const router = useRouter();
  const { id } = router.query;
 
  const userInfo = useQuery(["user", id], () =>
  getUserById(id)
  );

  useEffect(() => {window.localStorage.getItem('token') && parseJwt(window.localStorage.getItem('token'))._id === userInfo.data._id ? setAllowEdit(true) : setAllowEdit(false)}, [])
 
  const handleClick = (index) => {
   setIsEventOpened(index);
  };

  const parseJwt = (token) => {
    try {
      return JSON.parse(atob(token.split('.')[1]));
    } catch (e) {
      return null;
    }
  };

  const favouriteList = (arr) => {
    let newArr = [];
    for (let i = 0; i < arr.length; i++) {
     let isIn = false;
     for (let j = 0; j < newArr.length; j++) {
      if (arr[i]._id === newArr[j]._id) {
       isIn = true;
       newArr[j].number += 1;
      }
     }
     if (!isIn) {
      newArr.push({ ...arr[i], number: 1 });
     }
    }
    newArr.sort((a, b) => {
     if (a.number > b.number) return -1;
    });
    return newArr;
   };
   if (userInfo.isLoading) return <div>Loading...</div>
 return (
  <div className="w-full flex">
   <Head>
    <title>{userInfo.data.login}</title>
    <meta name="description" content="Generated by create next app" />
    <link rel="icon" href="/favicon.ico" />
   </Head>
   {isEventOpened > -1 && (
    <FullEvenView
     setIsEventOpened={setIsEventOpened}
     link={favouriteList(userInfo.data.winners)[isEventOpened].imgUrl}
     name={favouriteList(userInfo.data.winners)[isEventOpened].name}
     wins={favouriteList(userInfo.data.winners)[isEventOpened].wins}
     likes={favouriteList(userInfo.data.winners)[isEventOpened].likes}
     dislikes={favouriteList(userInfo.data.winners)[isEventOpened].dislikes}
    />
   )}
   <div className="flex-1 min-h-screen bg-slate-50 dark:bg-slate-800 p-10">
   <div className="text-xl md:text-3xl border-b-2 border-slate-600 p-2 mb-4 dark:text-slate-50">
      {userInfo.data.login}'s winners
     </div>
   <div className="grid gap-4 grid-cols-5 md:grid-cols-10">
      {userInfo.data.winners?.map((winner) => (
        <Link href={`/${winner.category}/${winner.subcategory}/${winner.sessionId}/result`}>
       <Winner image={winner.imgUrl} date={winner.date} />
       </Link>
      )).reverse()}
     </div>
     <div className="text-xl md:text-3xl border-b-2 border-slate-600 p-2 my-4 mt-7 dark:text-slate-50">
      Your favourites
     </div>
     <div className="flex-col">
      {favouriteList(userInfo.data.winners)?.map((winner, index) => (
       <RatingElement
        key={winner._id}
        index={index + 1}
        image={winner.imgUrl}
        wins={winner.number}
        handleClick={handleClick}
       >
        {winner.name}
       </RatingElement>
      ))}
     </div>
   </div>
   <div className="w-[25%] bg-slate-100 dark:bg-slate-900 min-h-screen">
    <div className="flex flex-col items-start px-10 pt-10">
     <img src={userInfo.data.imgUrl} alt="Profile img" className="w-full aspect-square border-4 border-slate-900 dark:border-slate-50 rounded-full object-cover mb-5"></img>
     <h1 className="dark:text-slate-50 text-4xl self-center text-center mb-5">{userInfo.data.login}</h1>
     {allowEdit && <button className="w-full mb-3 p-2 text-2xl bg-gradient-to-r dark:text-slate-900 text-slate-50 from-cyan-500 to-blue-600 hover:scale-110 ease-in-out duration-500">Edit</button>}
     {allowEdit && <button className="w-full mb-3 p-2 text-2xl bg-gradient-to-r dark:text-slate-900 text-slate-50 from-orange-600 to-red-600 hover:scale-110 ease-in-out duration-500">Delete</button>}
    </div>
   </div>
  </div>
 );
};

export default Me;
